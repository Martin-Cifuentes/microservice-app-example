name: Development Pipeline - Frontend

on:
  push:
    branches: [ "dev" ]
    paths:
      - "frontend/**"
  pull_request:
    branches: [ "dev" ]
    paths:
      - "frontend/**"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (frontend)
        run: |
          set -e
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json en frontend — abortando"
            exit 1
          fi

      - name: Run tests (frontend) if present
        run: |
          set -e
          if grep -q "\"test\"" package.json; then
            npm test
          else
            echo "No test script en frontend/package.json — saltando tests"
          fi

      - name: Build frontend
        run: |
          set -e
          if grep -q "\"build\"" package.json; then
            npm run build
          else
            echo "No script de build en package.json — saltando build"
          fi

      - name: Log in to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REG_USERNAME }}
          password: ${{ secrets.REG_PASSWORD }}

      - name: Build & Push Docker image for frontend
        run: |
          set -e
          IMAGE="${{ secrets.REGISTRY_URL }}/dev-frontend:${{ github.sha }}"
          # si hay Dockerfile en frontend
          if [ -f Dockerfile ]; then
            docker build -t "$IMAGE" .
          else
            # create a tiny Dockerfile on the fly for static build artefacts (optional)
            # Aquí se asume que `npm run build` generó `dist/` o `build/`.
            if [ -d dist ] || [ -d build ]; then
              TMPDF=Dockerfile.tmp
              cat > $TMPDF <<'EOF'
              FROM nginx:stable-alpine
              COPY . /usr/share/nginx/html
              EOF
              docker build -t "$IMAGE" -f $TMPDF .
              rm $TMPDF
            else
              echo "No Dockerfile y no hay carpeta de build (dist/ o build/) — abortando push"
              exit 1
            fi
          fi
          docker push "$IMAGE"
